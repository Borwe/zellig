// Code generated by protoc-gen-zig
///! package api.event
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package api.input_mode
const api_input_mode = @import("input_mode.pb.zig");
/// import package api.action
const api_action = @import("action.pb.zig");
/// import package api.style
const api_style = @import("style.pb.zig");
/// import package api.key
const api_key = @import("key.pb.zig");

pub const EventType = enum(i32) {
    ModeUpdate = 0,
    TabUpdate = 1,
    PaneUpdate = 2,
    Key = 3,
    Mouse = 4,
    Timer = 5,
    CopyToClipboard = 6,
    SystemClipboardFailure = 7,
    InputReceived = 8,
    Visible = 9,
    CustomMessage = 10,
    FileSystemCreate = 11,
    FileSystemRead = 12,
    FileSystemUpdate = 13,
    FileSystemDelete = 14,
    PermissionRequestResult = 15,
    SessionUpdate = 16,
    RunCommandResult = 17,
    WebRequestResult = 18,
    _,
};

pub const CopyDestination = enum(i32) {
    Command = 0,
    Primary = 1,
    System = 2,
    _,
};

pub const MouseEventName = enum(i32) {
    MouseScrollUp = 0,
    MouseScrollDown = 1,
    MouseLeftClick = 2,
    MouseRightClick = 3,
    MouseHold = 4,
    MouseRelease = 5,
    _,
};

pub const EventNameList = struct {
    event_types: ArrayList(EventType),

    pub const _desc_table = .{
        .event_types = fd(1, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Event = struct {
    name: EventType = @enumFromInt(0),
    payload: ?payload_union,

    pub const _payload_case = enum {
        mode_update_payload,
        tab_update_payload,
        pane_update_payload,
        key_payload,
        mouse_event_payload,
        timer_payload,
        copy_to_clipboard_payload,
        visible_payload,
        custom_message_payload,
        file_list_payload,
        permission_request_result_payload,
        session_update_payload,
        run_command_result_payload,
        web_request_result_payload,
    };
    pub const payload_union = union(_payload_case) {
        mode_update_payload: ModeUpdatePayload,
        tab_update_payload: TabUpdatePayload,
        pane_update_payload: PaneUpdatePayload,
        key_payload: api_key.Key,
        mouse_event_payload: MouseEventPayload,
        timer_payload: f32,
        copy_to_clipboard_payload: CopyDestination,
        visible_payload: bool,
        custom_message_payload: CustomMessagePayload,
        file_list_payload: FileListPayload,
        permission_request_result_payload: PermissionRequestResultPayload,
        session_update_payload: SessionUpdatePayload,
        run_command_result_payload: RunCommandResultPayload,
        web_request_result_payload: WebRequestResultPayload,
        pub const _union_desc = .{
            .mode_update_payload = fd(2, .{ .SubMessage = {} }),
            .tab_update_payload = fd(3, .{ .SubMessage = {} }),
            .pane_update_payload = fd(4, .{ .SubMessage = {} }),
            .key_payload = fd(5, .{ .SubMessage = {} }),
            .mouse_event_payload = fd(6, .{ .SubMessage = {} }),
            .timer_payload = fd(7, .{ .FixedInt = .I32 }),
            .copy_to_clipboard_payload = fd(8, .{ .Varint = .Simple }),
            .visible_payload = fd(9, .{ .Varint = .Simple }),
            .custom_message_payload = fd(10, .{ .SubMessage = {} }),
            .file_list_payload = fd(11, .{ .SubMessage = {} }),
            .permission_request_result_payload = fd(12, .{ .SubMessage = {} }),
            .session_update_payload = fd(13, .{ .SubMessage = {} }),
            .run_command_result_payload = fd(14, .{ .SubMessage = {} }),
            .web_request_result_payload = fd(15, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .name = fd(1, .{ .Varint = .Simple }),
        .payload = fd(null, .{ .OneOf = payload_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SessionUpdatePayload = struct {
    session_manifests: ArrayList(SessionManifest),
    resurrectable_sessions: ArrayList(ResurrectableSession),

    pub const _desc_table = .{
        .session_manifests = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .resurrectable_sessions = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RunCommandResultPayload = struct {
    exit_code: ?i32 = null,
    stdout: ManagedString = .Empty,
    stderr: ManagedString = .Empty,
    context: ArrayList(ContextItem),

    pub const _desc_table = .{
        .exit_code = fd(1, .{ .Varint = .Simple }),
        .stdout = fd(2, .String),
        .stderr = fd(3, .String),
        .context = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WebRequestResultPayload = struct {
    status: i32 = 0,
    headers: ArrayList(Header),
    body: ManagedString = .Empty,
    context: ArrayList(ContextItem),

    pub const _desc_table = .{
        .status = fd(1, .{ .Varint = .Simple }),
        .headers = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .body = fd(3, .String),
        .context = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextItem = struct {
    name: ManagedString = .Empty,
    value: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Header = struct {
    name: ManagedString = .Empty,
    value: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PermissionRequestResultPayload = struct {
    granted: bool = false,

    pub const _desc_table = .{
        .granted = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FileListPayload = struct {
    paths: ArrayList(ManagedString),

    pub const _desc_table = .{
        .paths = fd(1, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CustomMessagePayload = struct {
    message_name: ManagedString = .Empty,
    payload: ManagedString = .Empty,

    pub const _desc_table = .{
        .message_name = fd(1, .String),
        .payload = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MouseEventPayload = struct {
    mouse_event_name: MouseEventName = @enumFromInt(0),
    mouse_event_payload: ?mouse_event_payload_union,

    pub const _mouse_event_payload_case = enum {
        line_count,
        position,
    };
    pub const mouse_event_payload_union = union(_mouse_event_payload_case) {
        line_count: u32,
        position: api_action.Position,
        pub const _union_desc = .{
            .line_count = fd(2, .{ .Varint = .Simple }),
            .position = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .mouse_event_name = fd(1, .{ .Varint = .Simple }),
        .mouse_event_payload = fd(null, .{ .OneOf = mouse_event_payload_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TabUpdatePayload = struct {
    tab_info: ArrayList(TabInfo),

    pub const _desc_table = .{
        .tab_info = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaneUpdatePayload = struct {
    pane_manifest: ArrayList(PaneManifest),

    pub const _desc_table = .{
        .pane_manifest = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaneManifest = struct {
    tab_index: u32 = 0,
    panes: ArrayList(PaneInfo),

    pub const _desc_table = .{
        .tab_index = fd(1, .{ .Varint = .Simple }),
        .panes = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SessionManifest = struct {
    name: ManagedString = .Empty,
    tabs: ArrayList(TabInfo),
    panes: ArrayList(PaneManifest),
    connected_clients: u32 = 0,
    is_current_session: bool = false,
    available_layouts: ArrayList(LayoutInfo),

    pub const _desc_table = .{
        .name = fd(1, .String),
        .tabs = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .panes = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .connected_clients = fd(4, .{ .Varint = .Simple }),
        .is_current_session = fd(5, .{ .Varint = .Simple }),
        .available_layouts = fd(6, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const LayoutInfo = struct {
    name: ManagedString = .Empty,
    source: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .source = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ResurrectableSession = struct {
    name: ManagedString = .Empty,
    creation_time: u64 = 0,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .creation_time = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaneInfo = struct {
    id: u32 = 0,
    is_plugin: bool = false,
    is_focused: bool = false,
    is_fullscreen: bool = false,
    is_floating: bool = false,
    is_suppressed: bool = false,
    title: ManagedString = .Empty,
    exited: bool = false,
    exit_status: ?i32 = null,
    is_held: bool = false,
    pane_x: u32 = 0,
    pane_content_x: u32 = 0,
    pane_y: u32 = 0,
    pane_content_y: u32 = 0,
    pane_rows: u32 = 0,
    pane_content_rows: u32 = 0,
    pane_columns: u32 = 0,
    pane_content_columns: u32 = 0,
    cursor_coordinates_in_pane: ?api_action.Position = null,
    terminal_command: ?ManagedString = null,
    plugin_url: ?ManagedString = null,
    is_selectable: bool = false,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .is_plugin = fd(2, .{ .Varint = .Simple }),
        .is_focused = fd(3, .{ .Varint = .Simple }),
        .is_fullscreen = fd(4, .{ .Varint = .Simple }),
        .is_floating = fd(5, .{ .Varint = .Simple }),
        .is_suppressed = fd(6, .{ .Varint = .Simple }),
        .title = fd(7, .String),
        .exited = fd(8, .{ .Varint = .Simple }),
        .exit_status = fd(9, .{ .Varint = .Simple }),
        .is_held = fd(10, .{ .Varint = .Simple }),
        .pane_x = fd(11, .{ .Varint = .Simple }),
        .pane_content_x = fd(12, .{ .Varint = .Simple }),
        .pane_y = fd(13, .{ .Varint = .Simple }),
        .pane_content_y = fd(14, .{ .Varint = .Simple }),
        .pane_rows = fd(15, .{ .Varint = .Simple }),
        .pane_content_rows = fd(16, .{ .Varint = .Simple }),
        .pane_columns = fd(17, .{ .Varint = .Simple }),
        .pane_content_columns = fd(18, .{ .Varint = .Simple }),
        .cursor_coordinates_in_pane = fd(19, .{ .SubMessage = {} }),
        .terminal_command = fd(20, .String),
        .plugin_url = fd(21, .String),
        .is_selectable = fd(22, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TabInfo = struct {
    position: u32 = 0,
    name: ManagedString = .Empty,
    active: bool = false,
    panes_to_hide: u32 = 0,
    is_fullscreen_active: bool = false,
    is_sync_panes_active: bool = false,
    are_floating_panes_visible: bool = false,
    other_focused_clients: ArrayList(u32),
    active_swap_layout_name: ?ManagedString = null,
    is_swap_layout_dirty: bool = false,

    pub const _desc_table = .{
        .position = fd(1, .{ .Varint = .Simple }),
        .name = fd(2, .String),
        .active = fd(3, .{ .Varint = .Simple }),
        .panes_to_hide = fd(4, .{ .Varint = .Simple }),
        .is_fullscreen_active = fd(5, .{ .Varint = .Simple }),
        .is_sync_panes_active = fd(6, .{ .Varint = .Simple }),
        .are_floating_panes_visible = fd(7, .{ .Varint = .Simple }),
        .other_focused_clients = fd(8, .{ .PackedList = .{ .Varint = .Simple } }),
        .active_swap_layout_name = fd(9, .String),
        .is_swap_layout_dirty = fd(10, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ModeUpdatePayload = struct {
    current_mode: api_input_mode.InputMode = @enumFromInt(0),
    keybinds: ArrayList(InputModeKeybinds),
    style: ?api_style.Style = null,
    arrow_fonts_support: bool = false,
    session_name: ?ManagedString = null,

    pub const _desc_table = .{
        .current_mode = fd(1, .{ .Varint = .Simple }),
        .keybinds = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .style = fd(3, .{ .SubMessage = {} }),
        .arrow_fonts_support = fd(4, .{ .Varint = .Simple }),
        .session_name = fd(5, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const InputModeKeybinds = struct {
    mode: api_input_mode.InputMode = @enumFromInt(0),
    key_bind: ArrayList(KeyBind),

    pub const _desc_table = .{
        .mode = fd(1, .{ .Varint = .Simple }),
        .key_bind = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const KeyBind = struct {
    key: ?api_key.Key = null,
    action: ArrayList(api_action.Action),

    pub const _desc_table = .{
        .key = fd(1, .{ .SubMessage = {} }),
        .action = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
