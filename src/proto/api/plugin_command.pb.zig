// Code generated by protoc-gen-zig
///! package api.plugin_command
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package api.command
const api_command = @import("command.pb.zig");
/// import package api.file
const api_file = @import("file.pb.zig");
/// import package api.resize
const api_resize = @import("resize.pb.zig");
/// import package api.event
const api_event = @import("event.pb.zig");
/// import package api.message
const api_message = @import("message.pb.zig");
/// import package api.action
const api_action = @import("action.pb.zig");
/// import package api.plugin_permission
const api_plugin_permission = @import("plugin_permission.pb.zig");

pub const CommandName = enum(i32) {
    Subscribe = 0,
    Unsubscribe = 1,
    SetSelectable = 2,
    GetPluginIds = 3,
    GetZellijVersion = 4,
    OpenFile = 5,
    OpenFileFloating = 6,
    OpenTerminal = 7,
    OpenTerminalFloating = 8,
    OpenCommandPane = 9,
    OpenCommandPaneFloating = 10,
    SwitchTabTo = 11,
    SetTimeout = 12,
    ExecCmd = 13,
    PostMessageTo = 14,
    PostMessageToPlugin = 15,
    HideSelf = 16,
    ShowSelf = 17,
    SwitchToMode = 18,
    NewTabsWithLayout = 19,
    NewTab = 20,
    GoToNextTab = 21,
    GoToPreviousTab = 22,
    Resize = 23,
    ResizeWithDirection = 24,
    FocusNextPane = 25,
    FocusPreviousPane = 26,
    MoveFocus = 27,
    MoveFocusOrTab = 28,
    Detach = 29,
    EditScrollback = 30,
    Write = 31,
    WriteChars = 32,
    ToggleTab = 33,
    MovePane = 34,
    MovePaneWithDirection = 35,
    ClearScreen = 36,
    ScrollUp = 37,
    ScrollDown = 38,
    ScrollToTop = 39,
    ScrollToBottom = 40,
    PageScrollUp = 41,
    PageScrollDown = 42,
    ToggleFocusFullscreen = 43,
    TogglePaneFrames = 44,
    TogglePaneEmbedOrEject = 45,
    UndoRenamePane = 46,
    CloseFocus = 47,
    ToggleActiveTabSync = 48,
    CloseFocusedTab = 49,
    UndoRenameTab = 50,
    QuitZellij = 51,
    PreviousSwapLayout = 52,
    NextSwapLayout = 53,
    GoToTabName = 54,
    FocusOrCreateTab = 55,
    GoToTab = 56,
    StartOrReloadPlugin = 57,
    CloseTerminalPane = 58,
    ClosePluginPane = 59,
    FocusTerminalPane = 60,
    FocusPluginPane = 61,
    RenameTerminalPane = 62,
    RenamePluginPane = 63,
    RenameTab = 64,
    ReportCrash = 65,
    RequestPluginPermissions = 66,
    SwitchSession = 67,
    OpenTerminalInPlace = 68,
    OpenCommandInPlace = 69,
    OpenFileInPlace = 70,
    RunCommand = 71,
    WebRequest = 72,
    DeleteDeadSession = 73,
    DeleteAllDeadSessions = 74,
    RenameSession = 75,
    UnblockCliPipeInput = 76,
    BlockCliPipeInput = 77,
    CliPipeOutput = 78,
    MessageToPlugin = 79,
    DisconnectOtherClients = 80,
    KillSessions = 81,
    _,
};

pub const PaneType = enum(i32) {
    Terminal = 0,
    Plugin = 1,
    _,
};

pub const HttpVerb = enum(i32) {
    Get = 0,
    Post = 1,
    Put = 2,
    Delete = 3,
    _,
};

pub const FixedOrPercent = enum(i32) {
    Fixed = 0,
    Percent = 1,
    _,
};

pub const PluginCommand = struct {
    name: CommandName = @enumFromInt(0),
    payload: ?payload_union,

    pub const _payload_case = enum {
        subscribe_payload,
        unsubscribe_payload,
        set_selectable_payload,
        open_file_payload,
        open_file_floating_payload,
        open_terminal_payload,
        open_terminal_floating_payload,
        open_command_pane_payload,
        open_command_pane_floating_payload,
        switch_tab_to_payload,
        set_timeout_payload,
        exec_cmd_payload,
        post_message_to_payload,
        post_message_to_plugin_payload,
        show_self_payload,
        switch_to_mode_payload,
        new_tabs_with_layout_payload,
        resize_payload,
        resize_with_direction_payload,
        move_focus_payload,
        move_focus_or_tab_payload,
        write_payload,
        write_chars_payload,
        move_pane_with_direction_payload,
        go_to_tab_name_payload,
        focus_or_create_tab_payload,
        go_to_tab_payload,
        start_or_reload_plugin_payload,
        close_terminal_pane_payload,
        close_plugin_pane_payload,
        focus_terminal_pane_payload,
        focus_plugin_pane_payload,
        rename_terminal_pane_payload,
        rename_plugin_pane_payload,
        rename_tab_payload,
        report_crash_payload,
        request_plugin_permission_payload,
        switch_session_payload,
        open_file_in_place_payload,
        open_terminal_in_place_payload,
        open_command_pane_in_place_payload,
        run_command_payload,
        web_request_payload,
        delete_dead_session_payload,
        rename_session_payload,
        unblock_cli_pipe_input_payload,
        block_cli_pipe_input_payload,
        cli_pipe_output_payload,
        message_to_plugin_payload,
        kill_sessions_payload,
    };
    pub const payload_union = union(_payload_case) {
        subscribe_payload: SubscribePayload,
        unsubscribe_payload: UnsubscribePayload,
        set_selectable_payload: bool,
        open_file_payload: OpenFilePayload,
        open_file_floating_payload: OpenFilePayload,
        open_terminal_payload: OpenFilePayload,
        open_terminal_floating_payload: OpenFilePayload,
        open_command_pane_payload: OpenCommandPanePayload,
        open_command_pane_floating_payload: OpenCommandPanePayload,
        switch_tab_to_payload: SwitchTabToPayload,
        set_timeout_payload: SetTimeoutPayload,
        exec_cmd_payload: ExecCmdPayload,
        post_message_to_payload: PluginMessagePayload,
        post_message_to_plugin_payload: PluginMessagePayload,
        show_self_payload: bool,
        switch_to_mode_payload: api_action.SwitchToModePayload,
        new_tabs_with_layout_payload: ManagedString,
        resize_payload: ResizePayload,
        resize_with_direction_payload: ResizePayload,
        move_focus_payload: MovePayload,
        move_focus_or_tab_payload: MovePayload,
        write_payload: ManagedString,
        write_chars_payload: ManagedString,
        move_pane_with_direction_payload: MovePayload,
        go_to_tab_name_payload: ManagedString,
        focus_or_create_tab_payload: ManagedString,
        go_to_tab_payload: u32,
        start_or_reload_plugin_payload: ManagedString,
        close_terminal_pane_payload: u32,
        close_plugin_pane_payload: u32,
        focus_terminal_pane_payload: api_action.PaneIdAndShouldFloat,
        focus_plugin_pane_payload: api_action.PaneIdAndShouldFloat,
        rename_terminal_pane_payload: IdAndNewName,
        rename_plugin_pane_payload: IdAndNewName,
        rename_tab_payload: IdAndNewName,
        report_crash_payload: ManagedString,
        request_plugin_permission_payload: RequestPluginPermissionPayload,
        switch_session_payload: SwitchSessionPayload,
        open_file_in_place_payload: OpenFilePayload,
        open_terminal_in_place_payload: OpenFilePayload,
        open_command_pane_in_place_payload: OpenCommandPanePayload,
        run_command_payload: RunCommandPayload,
        web_request_payload: WebRequestPayload,
        delete_dead_session_payload: ManagedString,
        rename_session_payload: ManagedString,
        unblock_cli_pipe_input_payload: ManagedString,
        block_cli_pipe_input_payload: ManagedString,
        cli_pipe_output_payload: CliPipeOutputPayload,
        message_to_plugin_payload: MessageToPluginPayload,
        kill_sessions_payload: KillSessionsPayload,
        pub const _union_desc = .{
            .subscribe_payload = fd(2, .{ .SubMessage = {} }),
            .unsubscribe_payload = fd(3, .{ .SubMessage = {} }),
            .set_selectable_payload = fd(4, .{ .Varint = .Simple }),
            .open_file_payload = fd(5, .{ .SubMessage = {} }),
            .open_file_floating_payload = fd(6, .{ .SubMessage = {} }),
            .open_terminal_payload = fd(7, .{ .SubMessage = {} }),
            .open_terminal_floating_payload = fd(8, .{ .SubMessage = {} }),
            .open_command_pane_payload = fd(9, .{ .SubMessage = {} }),
            .open_command_pane_floating_payload = fd(10, .{ .SubMessage = {} }),
            .switch_tab_to_payload = fd(11, .{ .SubMessage = {} }),
            .set_timeout_payload = fd(12, .{ .SubMessage = {} }),
            .exec_cmd_payload = fd(13, .{ .SubMessage = {} }),
            .post_message_to_payload = fd(14, .{ .SubMessage = {} }),
            .post_message_to_plugin_payload = fd(15, .{ .SubMessage = {} }),
            .show_self_payload = fd(16, .{ .Varint = .Simple }),
            .switch_to_mode_payload = fd(17, .{ .SubMessage = {} }),
            .new_tabs_with_layout_payload = fd(18, .String),
            .resize_payload = fd(19, .{ .SubMessage = {} }),
            .resize_with_direction_payload = fd(20, .{ .SubMessage = {} }),
            .move_focus_payload = fd(21, .{ .SubMessage = {} }),
            .move_focus_or_tab_payload = fd(22, .{ .SubMessage = {} }),
            .write_payload = fd(23, .String),
            .write_chars_payload = fd(24, .String),
            .move_pane_with_direction_payload = fd(25, .{ .SubMessage = {} }),
            .go_to_tab_name_payload = fd(26, .String),
            .focus_or_create_tab_payload = fd(27, .String),
            .go_to_tab_payload = fd(28, .{ .Varint = .Simple }),
            .start_or_reload_plugin_payload = fd(29, .String),
            .close_terminal_pane_payload = fd(30, .{ .Varint = .Simple }),
            .close_plugin_pane_payload = fd(31, .{ .Varint = .Simple }),
            .focus_terminal_pane_payload = fd(32, .{ .SubMessage = {} }),
            .focus_plugin_pane_payload = fd(33, .{ .SubMessage = {} }),
            .rename_terminal_pane_payload = fd(34, .{ .SubMessage = {} }),
            .rename_plugin_pane_payload = fd(35, .{ .SubMessage = {} }),
            .rename_tab_payload = fd(36, .{ .SubMessage = {} }),
            .report_crash_payload = fd(37, .String),
            .request_plugin_permission_payload = fd(38, .{ .SubMessage = {} }),
            .switch_session_payload = fd(39, .{ .SubMessage = {} }),
            .open_file_in_place_payload = fd(40, .{ .SubMessage = {} }),
            .open_terminal_in_place_payload = fd(41, .{ .SubMessage = {} }),
            .open_command_pane_in_place_payload = fd(42, .{ .SubMessage = {} }),
            .run_command_payload = fd(43, .{ .SubMessage = {} }),
            .web_request_payload = fd(44, .{ .SubMessage = {} }),
            .delete_dead_session_payload = fd(45, .String),
            .rename_session_payload = fd(46, .String),
            .unblock_cli_pipe_input_payload = fd(47, .String),
            .block_cli_pipe_input_payload = fd(48, .String),
            .cli_pipe_output_payload = fd(49, .{ .SubMessage = {} }),
            .message_to_plugin_payload = fd(50, .{ .SubMessage = {} }),
            .kill_sessions_payload = fd(60, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .name = fd(1, .{ .Varint = .Simple }),
        .payload = fd(null, .{ .OneOf = payload_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const KillSessionsPayload = struct {
    session_names: ArrayList(ManagedString),

    pub const _desc_table = .{
        .session_names = fd(1, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CliPipeOutputPayload = struct {
    pipe_name: ManagedString = .Empty,
    output: ManagedString = .Empty,

    pub const _desc_table = .{
        .pipe_name = fd(1, .String),
        .output = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MessageToPluginPayload = struct {
    plugin_url: ?ManagedString = null,
    plugin_config: ArrayList(ContextItem),
    message_name: ManagedString = .Empty,
    message_payload: ?ManagedString = null,
    message_args: ArrayList(ContextItem),
    new_plugin_args: ?NewPluginArgs = null,

    pub const _desc_table = .{
        .plugin_url = fd(1, .String),
        .plugin_config = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .message_name = fd(3, .String),
        .message_payload = fd(4, .String),
        .message_args = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .new_plugin_args = fd(6, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NewPluginArgs = struct {
    should_float: ?bool = null,
    pane_id_to_replace: ?PaneId = null,
    pane_title: ?ManagedString = null,
    cwd: ?ManagedString = null,
    skip_cache: bool = false,

    pub const _desc_table = .{
        .should_float = fd(1, .{ .Varint = .Simple }),
        .pane_id_to_replace = fd(2, .{ .SubMessage = {} }),
        .pane_title = fd(3, .String),
        .cwd = fd(4, .String),
        .skip_cache = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaneId = struct {
    pane_type: PaneType = @enumFromInt(0),
    id: u32 = 0,

    pub const _desc_table = .{
        .pane_type = fd(1, .{ .Varint = .Simple }),
        .id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SwitchSessionPayload = struct {
    name: ?ManagedString = null,
    tab_position: ?u32 = null,
    pane_id: ?u32 = null,
    pane_id_is_plugin: ?bool = null,
    layout: ?api_event.LayoutInfo = null,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .tab_position = fd(2, .{ .Varint = .Simple }),
        .pane_id = fd(3, .{ .Varint = .Simple }),
        .pane_id_is_plugin = fd(4, .{ .Varint = .Simple }),
        .layout = fd(5, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RequestPluginPermissionPayload = struct {
    permissions: ArrayList(api_plugin_permission.PermissionType),

    pub const _desc_table = .{
        .permissions = fd(1, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SubscribePayload = struct {
    subscriptions: ?api_event.EventNameList = null,

    pub const _desc_table = .{
        .subscriptions = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnsubscribePayload = struct {
    subscriptions: ?api_event.EventNameList = null,

    pub const _desc_table = .{
        .subscriptions = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OpenFilePayload = struct {
    file_to_open: ?api_file.File = null,
    floating_pane_coordinates: ?FloatingPaneCoordinates = null,

    pub const _desc_table = .{
        .file_to_open = fd(1, .{ .SubMessage = {} }),
        .floating_pane_coordinates = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OpenCommandPanePayload = struct {
    command_to_run: ?api_command.Command = null,
    floating_pane_coordinates: ?FloatingPaneCoordinates = null,

    pub const _desc_table = .{
        .command_to_run = fd(1, .{ .SubMessage = {} }),
        .floating_pane_coordinates = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SwitchTabToPayload = struct {
    tab_index: u32 = 0,

    pub const _desc_table = .{
        .tab_index = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SetTimeoutPayload = struct {
    seconds: f64 = 0,

    pub const _desc_table = .{
        .seconds = fd(1, .{ .FixedInt = .I64 }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ExecCmdPayload = struct {
    command_line: ArrayList(ManagedString),

    pub const _desc_table = .{
        .command_line = fd(1, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RunCommandPayload = struct {
    command_line: ArrayList(ManagedString),
    env_variables: ArrayList(EnvVariable),
    cwd: ManagedString = .Empty,
    context: ArrayList(ContextItem),

    pub const _desc_table = .{
        .command_line = fd(1, .{ .List = .String }),
        .env_variables = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .cwd = fd(3, .String),
        .context = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WebRequestPayload = struct {
    url: ManagedString = .Empty,
    verb: HttpVerb = @enumFromInt(0),
    headers: ArrayList(api_event.Header),
    body: ManagedString = .Empty,
    context: ArrayList(ContextItem),

    pub const _desc_table = .{
        .url = fd(1, .String),
        .verb = fd(2, .{ .Varint = .Simple }),
        .headers = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .body = fd(4, .String),
        .context = fd(5, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EnvVariable = struct {
    name: ManagedString = .Empty,
    value: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextItem = struct {
    name: ManagedString = .Empty,
    value: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PluginMessagePayload = struct {
    message: ?api_message.Message = null,

    pub const _desc_table = .{
        .message = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ResizePayload = struct {
    resize: ?api_resize.Resize = null,

    pub const _desc_table = .{
        .resize = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MovePayload = struct {
    direction: ?api_resize.MoveDirection = null,

    pub const _desc_table = .{
        .direction = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IdAndNewName = struct {
    id: u32 = 0,
    new_name: ManagedString = .Empty,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .new_name = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FloatingPaneCoordinates = struct {
    x: ?FixedOrPercentValue = null,
    y: ?FixedOrPercentValue = null,
    width: ?FixedOrPercentValue = null,
    height: ?FixedOrPercentValue = null,

    pub const _desc_table = .{
        .x = fd(1, .{ .SubMessage = {} }),
        .y = fd(2, .{ .SubMessage = {} }),
        .width = fd(3, .{ .SubMessage = {} }),
        .height = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FixedOrPercentValue = struct {
    type: FixedOrPercent = @enumFromInt(0),
    value: u32 = 0,

    pub const _desc_table = .{
        .type = fd(1, .{ .Varint = .Simple }),
        .value = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
