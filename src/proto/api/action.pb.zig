// Code generated by protoc-gen-zig
///! package api.action
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package api.input_mode
const api_input_mode = @import("input_mode.pb.zig");
/// import package api.resize
const api_resize = @import("resize.pb.zig");

pub const SearchDirection = enum(i32) {
    Up = 0,
    Down = 1,
    _,
};

pub const SearchOption = enum(i32) {
    CaseSensitivity = 0,
    WholeWord = 1,
    Wrap = 2,
    _,
};

pub const MoveTabDirection = enum(i32) {
    Left = 0,
    Right = 1,
    _,
};

pub const ActionName = enum(i32) {
    Quit = 0,
    Write = 1,
    WriteChars = 2,
    SwitchToMode = 3,
    SwitchModeForAllClients = 4,
    Resize = 5,
    FocusNextPane = 6,
    FocusPreviousPane = 7,
    SwitchFocus = 8,
    MoveFocus = 9,
    MoveFocusOrTab = 10,
    MovePane = 11,
    MovePaneBackwards = 12,
    ClearScreen = 13,
    DumpScreen = 14,
    EditScrollback = 15,
    ScrollUp = 16,
    ScrollUpAt = 17,
    ScrollDown = 18,
    ScrollDownAt = 19,
    ScrollToBottom = 20,
    ScrollToTop = 21,
    PageScrollUp = 22,
    PageScrollDown = 23,
    HalfPageScrollUp = 24,
    HalfPageScrollDown = 25,
    ToggleFocusFullscreen = 26,
    TogglePaneFrames = 27,
    ToggleActiveSyncTab = 28,
    NewPane = 29,
    EditFile = 30,
    NewFloatingPane = 31,
    NewTiledPane = 32,
    TogglePaneEmbedOrFloating = 33,
    ToggleFloatingPanes = 34,
    CloseFocus = 35,
    PaneNameInput = 36,
    UndoRenamePane = 37,
    NewTab = 38,
    NoOp = 39,
    GoToNextTab = 40,
    GoToPreviousTab = 41,
    CloseTab = 42,
    GoToTab = 43,
    GoToTabName = 44,
    ToggleTab = 45,
    TabNameInput = 46,
    UndoRenameTab = 47,
    Run = 48,
    Detach = 49,
    LeftClick = 50,
    RightClick = 51,
    MiddleClick = 52,
    LaunchOrFocusPlugin = 53,
    LeftMouseRelease = 54,
    RightMouseRelease = 55,
    MiddleMouseRelease = 56,
    MouseHoldLeft = 57,
    MouseHoldRight = 58,
    MouseHoldMiddle = 59,
    SearchInput = 60,
    Search = 61,
    SearchToggleOption = 62,
    ToggleMouseMode = 63,
    PreviousSwapLayout = 64,
    NextSwapLayout = 65,
    QueryTabNames = 66,
    NewTiledPluginPane = 67,
    NewFloatingPluginPane = 68,
    StartOrReloadPlugin = 69,
    CloseTerminalPane = 70,
    ClosePluginPane = 71,
    FocusTerminalPaneWithId = 72,
    FocusPluginPaneWithId = 73,
    RenameTerminalPane = 74,
    RenamePluginPane = 75,
    RenameTab = 76,
    BreakPane = 77,
    BreakPaneRight = 78,
    BreakPaneLeft = 79,
    RenameSession = 80,
    LaunchPlugin = 81,
    CliPipe = 82,
    MoveTab = 83,
    _,
};

pub const Action = struct {
    name: ActionName = @enumFromInt(0),
    optional_payload: ?optional_payload_union,

    pub const _optional_payload_case = enum {
        switch_to_mode_payload,
        write_payload,
        write_chars_payload,
        switch_mode_for_all_clients_payload,
        resize_payload,
        move_focus_payload,
        move_focus_or_tab_payload,
        move_pane_payload,
        dump_screen_payload,
        scroll_up_at_payload,
        scroll_down_at_payload,
        new_pane_payload,
        edit_file_payload,
        new_floating_pane_payload,
        new_tiled_pane_payload,
        pane_name_input_payload,
        go_to_tab_payload,
        go_to_tab_name_payload,
        tab_name_input_payload,
        run_payload,
        left_click_payload,
        right_click_payload,
        middle_click_payload,
        launch_or_focus_plugin_payload,
        left_mouse_release_payload,
        right_mouse_release_payload,
        middle_mouse_release_payload,
        mouse_hold_left_payload,
        mouse_hold_right_payload,
        mouse_hold_middle_payload,
        search_input_payload,
        search_payload,
        search_toggle_option_payload,
        new_tiled_plugin_pane_payload,
        new_floating_plugin_pane_payload,
        start_or_reload_plugin_payload,
        close_terminal_pane_payload,
        close_plugin_pane_payload,
        focus_terminal_pane_with_id_payload,
        focus_plugin_pane_with_id_payload,
        rename_terminal_pane_payload,
        rename_plugin_pane_payload,
        rename_tab_payload,
        rename_session_payload,
        launch_plugin_payload,
        message_payload,
        move_tab_payload,
    };
    pub const optional_payload_union = union(_optional_payload_case) {
        switch_to_mode_payload: SwitchToModePayload,
        write_payload: WritePayload,
        write_chars_payload: WriteCharsPayload,
        switch_mode_for_all_clients_payload: SwitchToModePayload,
        resize_payload: api_resize.Resize,
        move_focus_payload: api_resize.ResizeDirection,
        move_focus_or_tab_payload: api_resize.ResizeDirection,
        move_pane_payload: MovePanePayload,
        dump_screen_payload: DumpScreenPayload,
        scroll_up_at_payload: ScrollAtPayload,
        scroll_down_at_payload: ScrollAtPayload,
        new_pane_payload: NewPanePayload,
        edit_file_payload: EditFilePayload,
        new_floating_pane_payload: NewFloatingPanePayload,
        new_tiled_pane_payload: NewTiledPanePayload,
        pane_name_input_payload: ManagedString,
        go_to_tab_payload: u32,
        go_to_tab_name_payload: GoToTabNamePayload,
        tab_name_input_payload: ManagedString,
        run_payload: RunCommandAction,
        left_click_payload: Position,
        right_click_payload: Position,
        middle_click_payload: Position,
        launch_or_focus_plugin_payload: LaunchOrFocusPluginPayload,
        left_mouse_release_payload: Position,
        right_mouse_release_payload: Position,
        middle_mouse_release_payload: Position,
        mouse_hold_left_payload: Position,
        mouse_hold_right_payload: Position,
        mouse_hold_middle_payload: Position,
        search_input_payload: ManagedString,
        search_payload: SearchDirection,
        search_toggle_option_payload: SearchOption,
        new_tiled_plugin_pane_payload: NewPluginPanePayload,
        new_floating_plugin_pane_payload: NewPluginPanePayload,
        start_or_reload_plugin_payload: ManagedString,
        close_terminal_pane_payload: u32,
        close_plugin_pane_payload: u32,
        focus_terminal_pane_with_id_payload: PaneIdAndShouldFloat,
        focus_plugin_pane_with_id_payload: PaneIdAndShouldFloat,
        rename_terminal_pane_payload: IdAndName,
        rename_plugin_pane_payload: IdAndName,
        rename_tab_payload: IdAndName,
        rename_session_payload: ManagedString,
        launch_plugin_payload: LaunchOrFocusPluginPayload,
        message_payload: CliPipePayload,
        move_tab_payload: MoveTabDirection,
        pub const _union_desc = .{
            .switch_to_mode_payload = fd(2, .{ .SubMessage = {} }),
            .write_payload = fd(3, .{ .SubMessage = {} }),
            .write_chars_payload = fd(4, .{ .SubMessage = {} }),
            .switch_mode_for_all_clients_payload = fd(5, .{ .SubMessage = {} }),
            .resize_payload = fd(6, .{ .SubMessage = {} }),
            .move_focus_payload = fd(7, .{ .Varint = .Simple }),
            .move_focus_or_tab_payload = fd(8, .{ .Varint = .Simple }),
            .move_pane_payload = fd(9, .{ .SubMessage = {} }),
            .dump_screen_payload = fd(10, .{ .SubMessage = {} }),
            .scroll_up_at_payload = fd(11, .{ .SubMessage = {} }),
            .scroll_down_at_payload = fd(12, .{ .SubMessage = {} }),
            .new_pane_payload = fd(13, .{ .SubMessage = {} }),
            .edit_file_payload = fd(14, .{ .SubMessage = {} }),
            .new_floating_pane_payload = fd(15, .{ .SubMessage = {} }),
            .new_tiled_pane_payload = fd(16, .{ .SubMessage = {} }),
            .pane_name_input_payload = fd(17, .String),
            .go_to_tab_payload = fd(18, .{ .Varint = .Simple }),
            .go_to_tab_name_payload = fd(19, .{ .SubMessage = {} }),
            .tab_name_input_payload = fd(20, .String),
            .run_payload = fd(21, .{ .SubMessage = {} }),
            .left_click_payload = fd(22, .{ .SubMessage = {} }),
            .right_click_payload = fd(23, .{ .SubMessage = {} }),
            .middle_click_payload = fd(24, .{ .SubMessage = {} }),
            .launch_or_focus_plugin_payload = fd(25, .{ .SubMessage = {} }),
            .left_mouse_release_payload = fd(26, .{ .SubMessage = {} }),
            .right_mouse_release_payload = fd(27, .{ .SubMessage = {} }),
            .middle_mouse_release_payload = fd(28, .{ .SubMessage = {} }),
            .mouse_hold_left_payload = fd(29, .{ .SubMessage = {} }),
            .mouse_hold_right_payload = fd(30, .{ .SubMessage = {} }),
            .mouse_hold_middle_payload = fd(31, .{ .SubMessage = {} }),
            .search_input_payload = fd(32, .String),
            .search_payload = fd(33, .{ .Varint = .Simple }),
            .search_toggle_option_payload = fd(34, .{ .Varint = .Simple }),
            .new_tiled_plugin_pane_payload = fd(35, .{ .SubMessage = {} }),
            .new_floating_plugin_pane_payload = fd(36, .{ .SubMessage = {} }),
            .start_or_reload_plugin_payload = fd(37, .String),
            .close_terminal_pane_payload = fd(38, .{ .Varint = .Simple }),
            .close_plugin_pane_payload = fd(39, .{ .Varint = .Simple }),
            .focus_terminal_pane_with_id_payload = fd(40, .{ .SubMessage = {} }),
            .focus_plugin_pane_with_id_payload = fd(41, .{ .SubMessage = {} }),
            .rename_terminal_pane_payload = fd(42, .{ .SubMessage = {} }),
            .rename_plugin_pane_payload = fd(43, .{ .SubMessage = {} }),
            .rename_tab_payload = fd(44, .{ .SubMessage = {} }),
            .rename_session_payload = fd(45, .String),
            .launch_plugin_payload = fd(46, .{ .SubMessage = {} }),
            .message_payload = fd(47, .{ .SubMessage = {} }),
            .move_tab_payload = fd(48, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .name = fd(1, .{ .Varint = .Simple }),
        .optional_payload = fd(null, .{ .OneOf = optional_payload_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CliPipePayload = struct {
    name: ?ManagedString = null,
    payload: ManagedString = .Empty,
    args: ArrayList(NameAndValue),
    plugin: ?ManagedString = null,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .payload = fd(2, .String),
        .args = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .plugin = fd(4, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IdAndName = struct {
    name: ManagedString = .Empty,
    id: u32 = 0,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaneIdAndShouldFloat = struct {
    pane_id: u32 = 0,
    should_float: bool = false,

    pub const _desc_table = .{
        .pane_id = fd(1, .{ .Varint = .Simple }),
        .should_float = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NewPluginPanePayload = struct {
    plugin_url: ManagedString = .Empty,
    pane_name: ?ManagedString = null,
    skip_plugin_cache: bool = false,

    pub const _desc_table = .{
        .plugin_url = fd(1, .String),
        .pane_name = fd(2, .String),
        .skip_plugin_cache = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const LaunchOrFocusPluginPayload = struct {
    plugin_url: ManagedString = .Empty,
    should_float: bool = false,
    plugin_configuration: ?PluginConfiguration = null,
    move_to_focused_tab: bool = false,
    should_open_in_place: bool = false,
    skip_plugin_cache: bool = false,

    pub const _desc_table = .{
        .plugin_url = fd(1, .String),
        .should_float = fd(2, .{ .Varint = .Simple }),
        .plugin_configuration = fd(3, .{ .SubMessage = {} }),
        .move_to_focused_tab = fd(4, .{ .Varint = .Simple }),
        .should_open_in_place = fd(5, .{ .Varint = .Simple }),
        .skip_plugin_cache = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GoToTabNamePayload = struct {
    tab_name: ManagedString = .Empty,
    create: bool = false,

    pub const _desc_table = .{
        .tab_name = fd(1, .String),
        .create = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NewFloatingPanePayload = struct {
    command: ?RunCommandAction = null,

    pub const _desc_table = .{
        .command = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NewTiledPanePayload = struct {
    command: ?RunCommandAction = null,
    direction: ?api_resize.ResizeDirection = null,

    pub const _desc_table = .{
        .command = fd(1, .{ .SubMessage = {} }),
        .direction = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MovePanePayload = struct {
    direction: ?api_resize.ResizeDirection = null,

    pub const _desc_table = .{
        .direction = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EditFilePayload = struct {
    file_to_edit: ManagedString = .Empty,
    line_number: ?u32 = null,
    cwd: ?ManagedString = null,
    direction: ?api_resize.ResizeDirection = null,
    should_float: bool = false,

    pub const _desc_table = .{
        .file_to_edit = fd(1, .String),
        .line_number = fd(2, .{ .Varint = .Simple }),
        .cwd = fd(3, .String),
        .direction = fd(4, .{ .Varint = .Simple }),
        .should_float = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ScrollAtPayload = struct {
    position: ?Position = null,

    pub const _desc_table = .{
        .position = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NewPanePayload = struct {
    direction: ?api_resize.ResizeDirection = null,
    pane_name: ?ManagedString = null,

    pub const _desc_table = .{
        .direction = fd(1, .{ .Varint = .Simple }),
        .pane_name = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SwitchToModePayload = struct {
    input_mode: api_input_mode.InputMode = @enumFromInt(0),

    pub const _desc_table = .{
        .input_mode = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WritePayload = struct {
    bytes_to_write: ManagedString = .Empty,

    pub const _desc_table = .{
        .bytes_to_write = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WriteCharsPayload = struct {
    chars: ManagedString = .Empty,

    pub const _desc_table = .{
        .chars = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const DumpScreenPayload = struct {
    file_path: ManagedString = .Empty,
    include_scrollback: bool = false,

    pub const _desc_table = .{
        .file_path = fd(1, .String),
        .include_scrollback = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Position = struct {
    line: i64 = 0,
    column: i64 = 0,

    pub const _desc_table = .{
        .line = fd(1, .{ .Varint = .Simple }),
        .column = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RunCommandAction = struct {
    command: ManagedString = .Empty,
    args: ArrayList(ManagedString),
    cwd: ?ManagedString = null,
    direction: ?api_resize.ResizeDirection = null,
    pane_name: ?ManagedString = null,
    hold_on_close: bool = false,
    hold_on_start: bool = false,

    pub const _desc_table = .{
        .command = fd(1, .String),
        .args = fd(2, .{ .List = .String }),
        .cwd = fd(3, .String),
        .direction = fd(4, .{ .Varint = .Simple }),
        .pane_name = fd(5, .String),
        .hold_on_close = fd(6, .{ .Varint = .Simple }),
        .hold_on_start = fd(7, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PluginConfiguration = struct {
    name_and_value: ArrayList(NameAndValue),

    pub const _desc_table = .{
        .name_and_value = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NameAndValue = struct {
    name: ManagedString = .Empty,
    value: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .value = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
